using System;

using Curan.Common.ApplicationComponent.Sound.Nsf;
using Curan.Utility;

/*
????????
?A?h???X:????
$2000:?R???g???[?????W?X?^1

bit ?p?r
--------------------------------------------------------
7   VBlank????NMI???????@0:?????A1:????
6   PPU?}?X?^?[?X???[?u?A????1
5   ?X?v???C?g?T?C?Y?@0:8x8?A1:8x16
4   ?w?i?p?^?[???e?[?u???A?h???X?w???@0:$0000?A1:$1000
3   ?X?v???C?g?p?^?[???e?[?u???A?h???X?w???@0:$0000?A1:$1000
2   PPU???????A?h???X?C???N???????g?@0:+=1?A1:+=32
1-0 ?l?[???e?[?u???A?h???X?w??
        +-----------+-----------+
        | 2 ($2800) | 3 ($2C00) |
        +-----------+-----------+
        | 0 ($2000) | 1 ($2400) |
        +-----------+-----------+

$2001:?R???g???[?????W?X?^2

bit  ????
------------------------------------------
7-5  ?w?i?F
        000:??
        001:??
        010:??
        100:??
4    ?X?v???C?g?L???@0:?????A1:?L??
3    ?w?i?L???@0:?????A1:?L??
2    ?X?v???C?g?}?X?N?A??????8?s?N?Z?????`???????B0:?`?????????A1:?`??
1    ?w?i?}?X?N?A??????8?s?N?Z?????`?????????B0:?`?????????A1:?`??
0    ?f?B?X?v???C?^?C?v?@0:?J???[?A1:???m?N??

$2003:?X?v???C?g???????A?h???X

$2004???o?R?????X?v???C?g????????????????8?r?b?g?A?h???X???w???B

$2004:?X?v???C?g???????f?[?^

$2003?????????w?????????X?v???C?g???????A?h???X???f?[?^???????????B ?????????x???X?v???C?g???????A?h???X???C???N???????g(+=1)???????B

$2005:?w?i?X?N???[???I?t?Z?b?g

?X?N???[???l???????A???????????????????B ?w???????l?????????l?[???e?[?u???A?h???X?????????????B

$2006:PPU???????A?h???X

$2007???o?R????PPU????????????????16?r?b?g?A?h???X???w???????B ????8?r?b?g?A????8?r?b?g???????????????B

$2007:PPU???????f?[?^

$2006?????????w????????PPU???????A?h???X???f?[?^???????????B ?????????x?????????A?h???X???C???N???????g($2000???r?b?g2????????+=1?A+=32)?????B


????????
?A?h???X:????
$2002:?X?e?[?^?X???W?X?^

????????????????$2005?????????????????N???A???????B

bit ?p?r
--------------------------------------------------------
7   VBlank????1?A???????????N???A?????B
6   ?X?v???C?g?q?b?g?@?q?b?g????1
5   ?X?L???????C???X?v???C?g???@0:8???????A1:9??????
4-0 ????
      ?i?r?b?g4??VRAM?????????t???O[0:????,1:???s]
           ?????????????????ANES???????@?\???????j

$2007:PPU???????f?[?^

PPU?????????f?[?^???o?b?t?@???o?R?????????????B PPU???????A?h???X??+=1?A????????+=32???????B
*/

namespace Curan.Common.Emulator
{
	// PPU???W?X?^
	public class CPpuRegister
	{
		Byte REG2000;
		Byte REG2001;
		Byte REG2002;
		Byte REG2003;
		Byte REG2004;
		Byte REG2005;
		Byte REG2006;
		Byte REG2007;

		UInt16 address;

		public CPpuRegister()
		{
			REG2000 = 0;
			REG2001 = 0;
			REG2002 = 0;
			REG2003 = 0;
			REG2004 = 0;
			REG2005 = 0;
			REG2006 = 0;
			REG2007 = 0;
		}

		public void Init()
		{
			REG2000 = 0;
			REG2001 = 0;
			REG2002 = 0;
			REG2003 = 0;
			REG2004 = 0;
			REG2005 = 0;
			REG2006 = 0;
			REG2007 = 0;
		}

		public void Update( NesMemory mem, CVram vram )
		{
			if( mem.IsWrite( 0x2000 ) == true )
			{
				REG2000 = mem.GetDataByte( 0x2000 );
				Logger.LogNormal( "2000:%02x\n" + REG2000 );
			}

			if( mem.IsWrite( 0x2001 ) == true )
			{
				REG2001 = mem.GetDataByte( 0x2001 );
				Logger.LogNormal( "2001:%02x\n" + REG2001 );
			}

			if( mem.IsWrite( 0x2002 ) == true )
			{
				REG2002 = mem.GetDataByte( 0x2002 );
				Logger.LogNormal( "2002:%02x\n" + REG2002 );
			}

			if( mem.IsWrite( 0x2003 ) == true )
			{
				REG2003 = mem.GetDataByte( 0x2003 );
				Logger.LogNormal( "2003:%02x\n" + REG2003 );
			}

			if( mem.IsWrite( 0x2004 ) == true )
			{
				REG2004 = mem.GetDataByte( 0x2004 );
				Logger.LogNormal( "2004:%02x\n" + REG2004 );
			}

			if( mem.IsWrite( 0x2005 ) == true )
			{
				REG2005 = mem.GetDataByte( 0x2005 );
				Logger.LogNormal( "2005:%02x\n" + REG2005 );
			}

			if( mem.IsWrite( 0x2006 ) == true )
			{
				REG2006 = mem.GetDataByte( 0x2006 );
				Logger.LogNormal( "2006:%02x\n" + REG2006 );

				address = ( UInt16 )( ( address << 8 ) | REG2006 );
				Logger.LogNormal( "address:%04x\n" + address );
			}

			if( mem.IsWrite( 0x2007 ) == true )
			{
				REG2007 = mem.GetDataByte( 0x2007 );
				Logger.LogNormal( "2007:%02x\n" + REG2007 );

				vram.SetDataByte( address, REG2007 );

				if( ( REG2000 & 0x04 ) == 0x00 )
				{
					address += 1;
				}
				else
				{
					address += 32;
				}

				Logger.LogNormal( "address:%04x\n" + address );
			}
		}

		public Byte GetREG2000()
		{
			return REG2000;
		}
	}

	// ?O???t?B?b?N????
	public class CPpu
	{
		CPpuRegister ppuRegister;

		public CPpu()
		{
			ppuRegister = new CPpuRegister();
		}

		public void Init()
		{
			ppuRegister.Init();
		}

		public void Update( NesMemory mem, CVram vram )
		{
			ppuRegister.Update( mem, vram );
		}

		public bool IsSetNmi()
		{
			if( ( ppuRegister.GetREG2000() & 0x80 ) == 0x80 )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	}
}
